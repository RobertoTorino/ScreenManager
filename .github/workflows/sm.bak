# ScreenManager continuous integration workflow configuration
name: CI Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up UTF-8 and PowerShell output
        shell: pwsh
        run: |
          $OutputEncoding = [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          Write-Host ":: Using PowerShell version: $($PSVersionTable.PSVersion)"

      - name: Build EXE, move to root and create ZIP
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $repoRoot       = $env:GITHUB_WORKSPACE
          $baseFile       = Join-Path $repoRoot "core\ahk\Compiler\Unicode 32-bit.bin"
          $ahkCompiler    = Join-Path $repoRoot "core\ahk\Compiler\Ahk2Exe.exe"
          $input          = Join-Path $repoRoot "apps\sm\sm.ahk"
          $output         = Join-Path $repoRoot "sm.exe"
          $icon           = Join-Path $repoRoot "apps\sm\sm.ico"
          $iniPath        = Join-Path $repoRoot "apps\sm\sm.ini"
          $versionTxt     = Join-Path $repoRoot "apps\sm\version.txt"
          $versionDat     = Join-Path $repoRoot "apps\sm\version.dat"
          $versionTpl     = Join-Path $repoRoot "apps\sm\version_template.txt"
          $versionDat     = Join-Path $repoRoot "apps\sm\version.dat"
          $settingsFolder = Join-Path $repoRoot "graphic-settings"
          $licensePath    = Join-Path $repoRoot "LICENSE"
          $readmePath     = Join-Path $repoRoot "apps\sm\README.txt"
          $changelogFile  = Join-Path $repoRoot "apps\sm\changelog.txt"
          $extraAssets    = @($readmePath, $iniPath, $licensePath, $versionTxt, $versionDat)
          

          # Extract version number from GitHub tag
          $rawTag = "${env:GITHUB_REF_NAME}"
          $version = $rawTag -replace '^v', ''
          Write-Host ":: Detected version: $version"

          # Define versioned file names
          $versionedExe = "sm_v$version.exe"
          $zipName = "sm_v$version.zip"
          
          $requiredFiles = @($ahkCompiler,$baseFile, $input)
          
          foreach ($file in $requiredFiles) {
            if (!(Test-Path $file)) {
              Write-Error ":: Required file not found: $file"
              exit 1
            }
            Write-Host ":: Found: $file"
          }

          foreach ($file in @($baseFile, $ahkCompiler, $input, $icon, $iniPath)) {
          if (!(Test-Path $file)) {
          Write-Error "Required file missing: $file"
          exit 1
            } else {
              Write-Host ":: Found: $file"
            }
          }

          # --- Compile ---
          $compileJob = Start-Process -FilePath $ahkCompiler `
          -ArgumentList "/in `"$input`" /out `"$output`" /icon `"$icon`" /base `"$baseFile`" /silent" `
          -NoNewWindow -PassThru -Wait -ErrorAction Stop
          
          if ($compileJob.ExitCode -ne 0) {
            Write-Error "Ahk2Exe failed with exit code $($compileJob.ExitCode)"
            exit 1
            }

          # Always move EXE to $env:GITHUB_WORKSPACE
          $repoRoot = $env:GITHUB_WORKSPACE
          $compiledExe = Join-Path $PWD $output
          $finalExe    = $output

          # Normal move/copy logic
          if ((Test-Path $compiledExe) -and ($compiledExe -ne $finalExe)) {
            Move-Item $compiledExe $finalExe -Force
            Write-Host ":: Moved EXE to $finalExe"
          }

          # Deep magic: if not found, check hardcoded place and copy
          if (!(Test-Path $finalExe)) {
            $knownGood = "D:\a\apps\sm\sm.exe"
            if (Test-Path $knownGood) {
              Write-Host ":: Found EXE at $knownGood after all! Copying to $finalExe"
              Copy-Item $knownGood $finalExe -Force
            }
          }
          
          Write-Host ":: Looking for output exe in current folder and repo root..."
          
          Get-ChildItem -Path $PWD -Filter "sm.exe" -Recurse | ForEach-Object { Write-Host "Found EXE at $($_.FullName)" }
          Get-ChildItem -Path $repoRoot -Filter "sm.exe" -Recurse | ForEach-Object { Write-Host ":: Found EXE at $($_.FullName)" }

          Write-Host ":: Looking for output at: $finalExe"
          Start-Sleep -Seconds 2
          if (!(Test-Path $finalExe)) {
            Write-Error ":: Build failed â€” output exe still not found at $finalExe"
            exit 1
          }

          # UPX
          Write-Host ":: Skipping UPX compression to prevent antivirus false positives."
          
          # Rename EXE to include version number
          if (Test-Path $finalExe) {
            Rename-Item -Path $finalExe -NewName $versionedExe -Force
            Write-Host ":: Renamed $finalExe to $versionedExe"
            $finalExe = $versionedExe
          } else {
            Write-Error ":: Expected EXE not found for renaming"
            exit 1
          }

          # ZIP
          $toZip = @($finalExe)
          
          foreach ($file in @($ahkCompiler, $baseFile, $input, $icon)) {
            if (!(Test-Path $file)) {
            Write-Error "Required file missing: $file"
            exit 1
              } else {
                Write-Host ":: Found: $file"
              }
            }
          
            foreach ($folder in @($settingsFolder)) {
            if (Test-Path $folder) {
              $files = Get-ChildItem -Path $folder -Recurse -File | Select-Object -ExpandProperty FullName
              $toZip += $files
              Write-Host ":: Added folder: $folder"
            } else {
              Write-Warning "Missing folder: $folder"
            }
          }
          
          foreach ($asset in $extraAssets) {
            $assetAbs = Join-Path $repoRoot $asset
            if (Test-Path $assetAbs) {
              $toZip += $assetAbs
              Write-Host ":: Added to zip: $assetAbs"
            } else {
              Write-Warning "Not adding (missing): $assetAbs"
            }
          }
          
          # --- Create ZIP ---
          Compress-Archive -Path $toZip -DestinationPath (Join-Path $repoRoot $zipName) -Force
          Write-Host ":: Created ZIP archive: $zipName"

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            sm_v*.exe
            sm_v*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

